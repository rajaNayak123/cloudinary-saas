generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enum for workspace roles
enum WorkspaceRole {
  OWNER
  EDITOR
  VIEWER
}

model Video {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String?
  publicId       String
  originalSize   String
  compressedSize String
  duration       Float
  userId         String // Clerk User ID of the uploader
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [userId]) // Relation to User model via Clerk ID

  // Relation to Workspaces (many-to-many)
  workspaces     Workspace[] @relation("WorkspaceVideos", fields: [workspaceIDs], references: [id])
  workspaceIDs   String[]    @db.ObjectId

  comments       Comment[]
  shareLinks     ShareLink[] @relation("VideoShareLinks") // Videos can have multiple share links
}

// Renamed Library to Workspace and added roles/memberships
model Workspace {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  ownerId     String // Clerk User ID of the owner
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  owner       User      @relation("OwnedWorkspaces", fields: [ownerId], references: [userId])
  memberships Membership[] // Relation to membership records

  // Relation to Videos (many-to-many)
  videos      Video[]   @relation("WorkspaceVideos", fields: [videoIDs], references: [id])
  videoIDs    String[]  @db.ObjectId

  shareLinks  ShareLink[] @relation("WorkspaceShareLinks") // Workspaces can have multiple share links
  activityLog ActivityLog[] // Added activity log relation
}

// Membership model to link Users and Workspaces with Roles
model Membership {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  role        WorkspaceRole
  userId      String // Clerk User ID of the member
  workspaceId String        @db.ObjectId
  createdAt   DateTime      @default(now())

  user        User          @relation(fields: [userId], references: [userId])
  workspace   Workspace     @relation(fields: [workspaceId], references: [id])

  @@unique([userId, workspaceId]) // Ensure a user is only in a workspace once
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId // Internal DB ID
  userId             String    @unique // Clerk User ID
  isSubscribed       Boolean   @default(false)
  storageQuota       BigInt    @default(41943040) // 40MB in bytes

  videos             Video[] // Videos uploaded by the user
  ownedWorkspaces    Workspace[] @relation("OwnedWorkspaces") // Workspaces owned by the user
  memberships        Membership[] // Workspaces the user is a member of

  comments           Comment[]
  activityLog        ActivityLog[] // Added activity log relation
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  timestamp Float?   // Optional timestamp in seconds
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   // Clerk User ID
  user      User     @relation(fields: [userId], references: [userId])
  videoId   String   @db.ObjectId
  video     Video    @relation(fields: [videoId], references: [id])

  // Store mentions if needed, e.g., array of mentioned Clerk User IDs
  // mentionedUserIds String[]
}

// Model for Share Links
model ShareLink {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  token        String    @unique @default(uuid()) // Unique token for the link
  resourceId   String    @db.ObjectId // ID of the Video or Workspace
  resourceType String    // "video" or "workspace"
  createdAt    DateTime  @default(now())
  expiresAt    DateTime? // Optional expiry date
  passwordHash String?   // Optional hashed password
  viewCount    Int       @default(0)

  // Relation back to the resource
  video        Video?     @relation("VideoShareLinks", fields: [resourceId], references: [id])
  workspace    Workspace? @relation("WorkspaceShareLinks", fields: [resourceId], references: [id])

  @@index([resourceId, resourceType])
}

// Model for Activity Log
model ActivityLog {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  action      String    // e.g., "VIDEO_UPLOADED", "MEMBER_ADDED", "COMMENT_POSTED"
  timestamp   DateTime  @default(now())
  userId      String    // Clerk User ID performing the action
  user        User      @relation(fields: [userId], references: [userId])
  workspaceId String    @db.ObjectId
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  details     Json?     // Store additional context like videoId, mentionedUserId, etc.

  @@index([workspaceId, timestamp])
}
